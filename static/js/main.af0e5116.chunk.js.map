{"version":3,"sources":["components/Loading.js","components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["loadingStyle","display","placeItems","position","width","height","Loading","style","xmlns","viewBox","fill","d","attributeName","type","from","to","dur","repeatCount","Header","className","src","alt","MemeGenerator","props","class","imgUrl","topText","bottomText","name","value","onChange","handelChange","onClick","getNewJoke","getNewImage","App","getRandomJoke","a","fetch","jokesApiUrl","res","json","data","getMemeImgs","memeImgApiUrl","memes","setRandomImg","randIndx","Math","floor","random","state","imgs","length","setState","url","event","target","setRandomJoke","then","joke","setup","punchline","componentDidMount","Promise","all","catch","err","console","error","jokeData","imgUrls","isLoading","render","minHeight","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af0e5116.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst loadingStyle = {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n}\r\n\r\nconst Loading = () => (\r\n    <div style={loadingStyle}>\r\n        <div>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 50 50\">\r\n                <path fill=\"#dc143c\" d=\"M25,5A20.14,20.14,0,0,1,45,22.88a2.51,2.51,0,0,0,2.49,2.26h0A2.52,2.52,0,0,0,50,22.33a25.14,25.14,0,0,0-50,0,2.52,2.52,0,0,0,2.5,2.81h0A2.51,2.51,0,0,0,5,22.88,20.14,20.14,0,0,1,25,5Z\">\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.5s\" repeatCount=\"indefinite\" />\r\n                </path>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Loading;","import React from \"react\"\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <img className=\"header-img\" src=\"./imgs/troll-face.png\" alt=\"troll face\" />\r\n        <h1 className=\"header-title\">Meme Generator</h1>\r\n    </header>\r\n)\r\nexport default Header;","import React from \"react\"\r\n\r\nconst MemeGenerator = (props) => (\r\n    <main className=\"main main-grid\">\r\n        <div class=\"meme\">\r\n            <img src={props.imgUrl} className=\"meme-img\" alt=\"Meme Img\" />\r\n            <label className=\"top-text\">{props.topText}</label>\r\n            <label className=\"bottom-text\">{props.bottomText}</label>\r\n        </div>\r\n        <form className=\"meme-form\">\r\n            <textarea\r\n                className=\"txt-input\"\r\n                name=\"topText\"\r\n                type=\"text\"\r\n                value={props.topText}\r\n                onChange={props.handelChange}\r\n            />\r\n            <textarea\r\n                className=\"txt-input\"\r\n                name=\"bottomText\"\r\n                type=\"text\"\r\n                value={props.bottomText}\r\n                onChange={props.handelChange}\r\n            />\r\n            <button class=\"font-btn\" type=\"button\" onClick={props.getNewJoke}>Get Random Jokes</button>\r\n            <button class=\"font-btn\" type=\"button\" onClick={props.getNewImage}>Get Another Meme Image</button>\r\n        </form>\r\n    </main>\r\n)\r\n\r\nexport default MemeGenerator;","import React from \"react\";\nimport Loading from \"./components/Loading\";\nimport Header from \"./components/Header\";\nimport MemeGenerator from \"./components/MemeGenerator\";\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.jokesApiUrl = \"https://official-joke-api.appspot.com/jokes/random\"\n        this.memeImgApiUrl = \"https://api.imgflip.com/get_memes\"\n\n        this.state = {\n            isLoading: true,\n            topText: \"\",\n            bottomText: \"\",\n            imgUrl: \"\",\n            imgs: [],\n        }\n    }\n\n    getRandomJoke = async () => {\n        const res = await fetch(this.jokesApiUrl);\n        const data = await res.json();\n\n        return data;\n    }\n\n    getMemeImgs = async () => {\n        const res = await fetch(this.memeImgApiUrl);\n        const { data } = await res.json();\n\n        return data.memes;\n    }\n\n    setRandomImg = () => {\n        const randIndx = Math.floor(Math.random() * this.state.imgs.length)\n        this.setState({ imgUrl: this.state.imgs[randIndx].url })\n    }\n\n    handelChange = (event) => {\n        const { name, value } = event.target\n        this.setState({ [name]: value });\n    }\n\n    setRandomJoke = () => {\n        this.getRandomJoke()\n            .then(joke => {\n                this.setState({\n                    topText: joke.setup,\n                    bottomText: joke.punchline,\n                });\n            });\n    }\n\n    componentDidMount = () => {\n        Promise.all([\n            this.getRandomJoke().catch(err => console.error(err)),\n            this.getMemeImgs().catch(err => console.error(err))\n        ]).then(([jokeData, imgUrls]) => {\n            this.setState({\n                topText: jokeData.setup,\n                bottomText: jokeData.punchline,\n                imgUrl: imgUrls[Math.floor(Math.random() * imgUrls.length)].url,\n                imgs: imgUrls,\n            });\n            this.setState({ isLoading: false });\n        });\n    }\n\n    render = () => {\n        return (\n            <div style={{\n                minHeight: \"75vh\", position: \"relative\"\n            }}>\n                <Header />\n                {\n                    (this.state.isLoading) ?\n                        <Loading />\n                        :\n                        <MemeGenerator\n                            {...this.state}\n                            getNewImage={this.setRandomImg}\n                            getNewJoke={this.setRandomJoke}\n                            handelChange={this.handelChange}\n                        />\n                }\n            </div >\n        )\n    }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}